// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:demoapp/model/base_response_entity.dart';
import 'package:demoapp/generated/json/base_response_entity_helper.dart';
import 'package:demoapp/errors/base_error_entity.dart';
import 'package:demoapp/generated/json/base_error_entity_helper.dart';
import 'package:demoapp/api/errors/base_error_public_api_entity.dart';
import 'package:demoapp/generated/json/base_error_public_api_entity_helper.dart';
import 'package:demoapp/model/language_entity.dart';
import 'package:demoapp/generated/json/language_entity_helper.dart';
import 'package:demoapp/model/error_entity.dart';
import 'package:demoapp/generated/json/error_entity_helper.dart';

class JsonConvert<T> {
  T fromJson(Map<String, dynamic> json) {
    return _getFromJson<T>(runtimeType, this, json);
  }

  Map<String, dynamic> toJson() {
    return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
      case BaseResponseEntity:
        return baseResponseEntityFromJson(data as BaseResponseEntity, json) as T;
      case BaseResponseData:
        return baseResponseDataFromJson(data as BaseResponseData, json) as T;
      case DataUpload:
        return dataUploadFromJson(data as DataUpload, json) as T;
      case BaseErrorEntity:
        return baseErrorEntityFromJson(data as BaseErrorEntity, json) as T;
      case BaseError:
        return baseErrorFromJson(data as BaseError, json) as T;
      case BaseErrorPublicApiEntity:
        return baseErrorPublicApiEntityFromJson(data as BaseErrorPublicApiEntity, json) as T;
      case LanguageEntity:
        return languageEntityFromJson(data as LanguageEntity, json) as T;
      case ErrorEntity:
        return errorEntityFromJson(data as ErrorEntity, json) as T;
    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
    switch (type) {
      case BaseResponseEntity:
        return baseResponseEntityToJson(data as BaseResponseEntity);
      case BaseResponseData:
        return baseResponseDataToJson(data as BaseResponseData);
      case DataUpload:
        return dataUploadToJson(data as DataUpload);
      case BaseErrorEntity:
        return baseErrorEntityToJson(data as BaseErrorEntity);
      case BaseError:
        return baseErrorToJson(data as BaseError);
      case BaseErrorPublicApiEntity:
        return baseErrorPublicApiEntityToJson(data as BaseErrorPublicApiEntity);
      case LanguageEntity:
        return languageEntityToJson(data as LanguageEntity);
      case ErrorEntity:
        return errorEntityToJson(data as ErrorEntity);
    }
    return data as T;
  }

  //Go back to a single instance by type
  static _fromJsonSingle<M>(json) {
    String type = M.toString();
    if (type == (BaseResponseEntity).toString()) {
      return BaseResponseEntity().fromJson(json);
    } else if (type == (BaseResponseData).toString()) {
      return BaseResponseData().fromJson(json);
    } else if (type == (DataUpload).toString()) {
      return DataUpload().fromJson(json);
    } else if (type == (BaseErrorEntity).toString()) {
      return BaseErrorEntity().fromJson(json);
    } else if (type == (BaseError).toString()) {
      return BaseError().fromJson(json);
    } else if (type == (BaseErrorPublicApiEntity).toString()) {
      return BaseErrorPublicApiEntity().fromJson(json);
    } else if (type == (LanguageEntity).toString()) {
      return LanguageEntity().fromJson(json);
    } else if (type == (ErrorEntity).toString()) {
      return ErrorEntity().fromJson(json);
    }
    return null;
  }

  //list is returned by type
  static M _getListChildType<M>(List data) {
    if (<BaseResponseEntity>[] is M) {
      return data.map<BaseResponseEntity>((e) => BaseResponseEntity().fromJson(e)).toList() as M;
    } else if (<BaseResponseData>[] is M) {
      return data.map<BaseResponseData>((e) => BaseResponseData().fromJson(e)).toList() as M;
    } else if (<DataUpload>[] is M) {
      return data.map<DataUpload>((e) => DataUpload().fromJson(e)).toList() as M;
    } else if (<BaseErrorEntity>[] is M) {
      return data.map<BaseErrorEntity>((e) => BaseErrorEntity().fromJson(e)).toList() as M;
    } else if (<BaseError>[] is M) {
      return data.map<BaseError>((e) => BaseError().fromJson(e)).toList() as M;
    } else if (<BaseErrorPublicApiEntity>[] is M) {
      return data
          .map<BaseErrorPublicApiEntity>((e) => BaseErrorPublicApiEntity().fromJson(e))
          .toList() as M;
    } else if (<LanguageEntity>[] is M) {
      return data.map<LanguageEntity>((e) => LanguageEntity().fromJson(e)).toList() as M;
    } else if (<ErrorEntity>[] is M) {
      return data.map<ErrorEntity>((e) => ErrorEntity().fromJson(e)).toList() as M;
    }
    throw Exception("not fond");
  }

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}
